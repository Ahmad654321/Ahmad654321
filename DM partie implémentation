def is_powersmooth(x,B):
    G = list(factor(x))
    for i in G:
        if i[0]**i[1] > B:
            return false
    return true

def ppcm(x, y):
    return (x*y /gcd(x,y))

def compute_bound(B):
    H = range(2,B+1)
    v = 1
    for i in H:
        v = ppcm(v,i)
    return v

def tronc(M):
    x = M
    T = []
    while x > 1:
        T.append(x)
        x = floor(x>>1)
    T.append(x)
    T.reverse()
    return T

def calcul_x(x_1, M, N):
    d = dict([("1", x_1)])
    M_2 = Integer(M).digits(base=2) 
    M_2.pop()
    M_2.reverse()
    a = 1
    d[str(2*a)] = (2*d[str(a)]**2 - 1)%N
    for i in n_dec:
        if i == 0:
            d[str(a*2)] = (2*d[str(a)]**2 - 1)%N 
            d[str(a*2+1)] = (2*d[str(a)]*d[str(a+1)] - x1)%N 
            a = a*2
        else:
            d[str(a*2+1)] = (2*d[str(a)]*d[str(a+1)] - x1)%N 
            d[str((a+1)*2)] = (2*d[str(a+1)]**2 - 1)%N          
            a = a*2+1
    return d[str(M)]

def Algorithme1(B,N):
    d = N
    M = compute_bound(B)
    a = tronc(M)
    while d == N:
        x_1 = randint(1,N-1)
        d = gcd(x_1,N)
        if d != 1:
            return d
        x_M = calcul_x(x_1,M,N)
        d = gcd(x_M - 1, N)
        if d != 1:
    return d


